package com.tykj.template.service.sys;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.tykj.template.domain.Permission;
import com.tykj.template.domain.Role;
import com.tykj.template.domain.User;
import com.tykj.template.dto.PermissionDto;
import com.tykj.template.dto.RoleDto;
import com.tykj.template.repository.PermissionRepository;
import com.tykj.template.repository.RoleRepository;
import com.tykj.template.repository.UserRepository;
import com.tykj.template.security.utils.SecurityUtils;
import com.tykj.template.service.mail.MailService;
import com.tykj.template.service.redis.RedisService;
import com.tykj.template.utils.BeanMapper;
import com.tykj.template.utils.Constants;
import com.tykj.template.utils.StringUtils;

@Service
public class SysService {

	public static final String PLAIN_PASSWORD = "mypassword";

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private PermissionRepository permissionRepository;

	@Autowired
	private MailService mailService;

	@Autowired
	private RedisService redisService;

	public List<Role> getAllRole() {
		return BeanMapper.mapList(roleRepository.findAll(), Role.class);
	}

	public List<User> getAllUser() {
		return BeanMapper.mapList(userRepository.findAll(), User.class);
	}

	public List<Permission> getAllPermission() {
		return BeanMapper.mapList(permissionRepository.findAll(), Permission.class);
	}

	public User getUserByUserName(String username) {
		return userRepository.findByLoginName(username);
	}

	public User getUserByEmail(String email) {
		return userRepository.findByEmail(email);
	}

	public User getUserById(long userid) {
		return userRepository.findOne(userid);
	}

	public Role getRoleById(long roleid) {
		return roleRepository.findOne(roleid);
	}

	public void saveUser(User user) {
		userRepository.save(user);
	}

	public void saveUser(User user, MultipartFile user_profile_file) throws IOException {
		User saveUser = null;
		if (user.getId() != null && user.getId() != 0) {
			saveUser = getUserById(user.getId());
			saveUser.setEmail(user.getEmail());
			saveUser.setName(user.getName());
			if (!user.getPlainPassword().equals(PLAIN_PASSWORD)) {
				saveUser.setPassword(SecurityUtils.encoderPassword(user.getPlainPassword()));
			}
			saveUser.setTel(user.getTel());
		} else {
			saveUser = user;
			saveUser.setCreateTime(new Date());
			saveUser.setPassword(SecurityUtils.encoderPassword(user.getPlainPassword()));
			saveUser.setRoleList(getDefaultRoleList());
			saveUser.setStatus(1);
		}
		user.setUserProfile(saveUserProfile(user_profile_file));
		saveUser(saveUser);
	}

	private String saveUserProfile(MultipartFile user_profile_file) throws IOException {
		if (user_profile_file == null || user_profile_file.getSize() == 0) {
			return null;
		}
		String tempName = System.currentTimeMillis()
				+ StringUtils.getFileNameExt(user_profile_file.getOriginalFilename());
		String saveUrl = Constants.getPath(Constants.PATH_USER_PROFILE) + File.separator + tempName;
		File tempFile = new File(saveUrl);
		user_profile_file.transferTo(tempFile);
		return saveUrl;
	}

	public void sendPasswordFindMail(String email) throws Exception {
		User user = getUserByEmail(email);
		String uuid = StringUtils.getUUID();
		mailService.sendPasswordFindMail(email, user.getName(), Constants.MAIL_PASSWORD_FIND_LINKURL_PRI + "/" + uuid);
		redisService.setValue(uuid, email, 60 * 60 * 48);
	}

	public String getPasswordFindEmail(String uuid) {
		return redisService.getValue(uuid);
	}

	public void savePasswordFind(String uuid, String password) {
		String email = getPasswordFindEmail(uuid);
		User user = getUserByEmail(email);
		user.setPassword(SecurityUtils.encoderPassword(password));
		saveUser(user);
	}

	@PreAuthorize("hasAuthority('管理员')")
	public void enableUser(String username) {
		User user = getUserByUserName(username);
		if (user != null) {
			user.setStatus(Constants.USER_STATUS_ENABLE);
		}
		saveUser(user);
	}

	@PreAuthorize("hasAuthority('管理员')")
	public void disableUser(String username) {
		User user = getUserByUserName(username);
		if (user != null) {
			user.setStatus(Constants.USER_STATUS_DISABLE);
		}
		saveUser(user);
	}

	private List<Role> getDefaultRoleList() {
		List<Role> list = new ArrayList<Role>();
		list.add(new Role(Constants.ROLE_DEFAULT_ID));
		return list;
	}

	public List<RoleDto> getRoleListWithSelectedUser(long userid) {
		List<RoleDto> roleDto = new ArrayList<RoleDto>();
		User user = getUserById(userid);
		List<Role> userRoles = user.getRoleList();
		List<Role> roles = getAllRole();
		for (Role role : roles) {
			RoleDto dto = new RoleDto(role);
			for (Role userRole : userRoles) {
				if (role.getId().longValue() == userRole.getId().longValue()) {
					dto.setCheck(true);
					break;
				}
			}
			roleDto.add(dto);
		}
		return roleDto;
	}

	@PreAuthorize("authentication.name == 'user'")
	public void saveUserRole(long userid, long[] roles) {
		User user = getUserById(userid);
		List<Role> roleList = new ArrayList<Role>();
		if (roles != null) {
			for (long roleid : roles) {
				roleList.add(new Role(roleid));
			}
		}
		user.setRoleList(roleList);
		saveUser(user);
	}

	public Role getRoleByName(String rolename) {
		return roleRepository.findByName(rolename);
	}

	public void saveRole(Role role) {
		roleRepository.save(role);
	}

	@PreAuthorize("hasAuthority('管理员')")
	public void enableRole(String rolename) {
		Role role = getRoleByName(rolename);
		if (role != null) {
			role.setStatus(Constants.ROLE_STATUS_ENABLE);
		}
		saveRole(role);
	}

	@PreAuthorize("hasAuthority('管理员')")
	public void disableRole(String rolename) {
		Role role = getRoleByName(rolename);
		if (role != null) {
			role.setStatus(Constants.ROLE_STATUS_DISABLE);
		}
		saveRole(role);
	}

	public void saveRole(String rolename) {
		Role role = new Role();
		role.setStatus(Constants.ROLE_STATUS_ENABLE);
		role.setCreateTime(new Date());
		role.setName(rolename);
		saveRole(role);
	}

	public List<PermissionDto> getAllPermissionDto() {
		List<PermissionDto> perms = transPermissionToDto(getAllPermission());
		if (perms == null) {
			return null;
		}
		Collections.sort(perms);
		List<PermissionDto> dtoList = new ArrayList<PermissionDto>();
		Map<Long, PermissionDto> map = new HashMap<Long, PermissionDto>();
		for (PermissionDto perm : perms) {
			if (perm.getParentId().longValue() == SecurityUtils.PERMISSION_ROOT_ID.longValue()) {
				dtoList.add(perm);
			}
			if (map.containsKey(perm.getParentId().longValue())) {
				PermissionDto parent = map.get(perm.getParentId().longValue());
				perm.setParent(parent);
				List<PermissionDto> children = parent.getChildren();
				if (children == null) {
					children = new ArrayList<PermissionDto>();
				}
				children.add(perm);
			}
			map.put(perm.getId().longValue(), perm);
		}
		return dtoList;
	}

	private List<PermissionDto> transPermissionToDto(List<Permission> perms) {
		if (perms == null) {
			return null;
		}
		List<PermissionDto> list = new ArrayList<PermissionDto>();
		for (Permission perm : perms) {
			list.add(new PermissionDto(perm));
		}
		return list;
	}

	public List<PermissionDto> getAllPermissionDto(List<Permission> list) {
		List<PermissionDto> perms = getAllPermissionDto();
		setPermissionCheck(perms, list);
		return perms;
	}

	private void setPermissionCheck(List<PermissionDto> all, List<Permission> check) {
		if (all != null && check != null) {
			for (PermissionDto dto : all) {
				for (Permission ch : check) {
					if (dto.getId() == ch.getId()) {
						dto.setCheck(true);
					}
				}
				setPermissionCheck(dto.getChildren(), check);
			}
		}
	}

	public void saveRolePerms(long id, long[] perms) {
		Role role = getRoleById(id);
		List<Permission> list = new ArrayList<Permission>();
		if (perms != null) {
			for (long perm : perms) {
				list.add(new Permission(perm));
			}
		}
		role.setPermissionList(list);
		saveRole(role);
	}

}
