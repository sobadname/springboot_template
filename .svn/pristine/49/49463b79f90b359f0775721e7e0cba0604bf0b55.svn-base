package com.tykj.start.security.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.ObjectPostProcessor;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.tykj.start.security.handler.LoginSuccessHandler;
import com.tykj.start.security.service.SecurityAccessDecisionService;
import com.tykj.start.security.service.SecurityMetadataSourceService;
import com.tykj.start.security.service.SecurityUserDetailsService;
import com.tykj.start.security.utils.SecurityUtils;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	private Logger logger = LoggerFactory.getLogger(SecurityConfig.class);

	@Autowired
	private SecurityUserDetailsService securityUserDetailsService;

	@Autowired
	private SecurityAccessDecisionService securityAccessDecisionService;

	@Autowired
	private SecurityMetadataSourceService securityMetadataSourceService;

	@Autowired
	private LoginSuccessHandler loginSuccessHandler;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers("/css/**", "/font-awesome/**", "/js/**", "/actuator/**").permitAll()
				.anyRequest().authenticated().and().formLogin().loginPage("/login").defaultSuccessUrl("/index")
				.failureUrl("/login?error").permitAll().successHandler(loginSuccessHandler).and().logout()
				.logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/login?logout")
				.invalidateHttpSession(true).permitAll().and().rememberMe().tokenValiditySeconds(60 * 60 * 24);// remember24h
		http.authorizeRequests().anyRequest().authenticated()
				.withObjectPostProcessor(new ObjectPostProcessor<FilterSecurityInterceptor>() {
					public <O extends FilterSecurityInterceptor> O postProcess(O fsi) {
						fsi.setAccessDecisionManager(securityAccessDecisionService);
						fsi.setSecurityMetadataSource(securityMetadataSourceService);
						return fsi;
					}
				});
		logger.info("security config, set /css/**, /font-awesome/**, /js/**, /actuator/** permit all");
	}

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(securityUserDetailsService).passwordEncoder(SecurityUtils.getPasswordEncoder());
		auth.eraseCredentials(true);
		logger.info("security config, set userDetailsService: " + securityUserDetailsService
				+ ", set eraseCredentials: true");
	}

}
