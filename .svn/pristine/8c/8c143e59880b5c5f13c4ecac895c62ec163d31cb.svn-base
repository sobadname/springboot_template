package com.tykj.start.web.account;

import java.io.IOException;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.tykj.start.domain.User;
import com.tykj.start.service.account.AccountService;
import com.tykj.start.utils.StringUtils;

@Controller
@RequestMapping(value = "/account")
public class AccountController {

	@Autowired
	private AccountService accountService;

	@RequestMapping(value = "/user/list", method = RequestMethod.GET)
	public String userList(Model model) {
		List<User> users = accountService.getAllUser();
		model.addAttribute("users", users);
		return "account/userList";
	}

	@GetMapping("/user/enable/{username}")
	public String enableUser(@PathVariable("username") String username) {
		accountService.enableUser(username);
		return "redirect:/account/user/list";
	}

	@GetMapping("/user/disable/{username}")
	public String disableUser(@PathVariable("username") String username) {
		accountService.disableUser(username);
		return "redirect:/account/user/list";
	}

	@PostMapping("/register")
	public String register(@Valid User user, @RequestParam("user_profile_file") MultipartFile user_profile_file,
			RedirectAttributes redirectAttributes) throws IOException {
		accountService.register(user, user_profile_file);
		redirectAttributes.addAttribute("register", "success");
		return "redirect:/login";
	}

	@PostMapping("/password/find")
	public String passwordFind(@RequestParam("email") String email, Model model) {
		try {
			accountService.sendPasswordFindMail(email);
		} catch (Exception e) {
		}
		model.addAttribute("mail_login_url", StringUtils.getLoginUrlFromEmail(email));
		return "/account/password_find_mail";
	}

	@GetMapping("/password/find/{uuid}")
	public String passwordUpdateForm(@PathVariable("uuid") String uuid, RedirectAttributes redirectAttributes,
			Model model) {
		String email = accountService.getPasswordFindEmail(uuid);
		if (email == null) {
			redirectAttributes.addAttribute("find", "fail");
			return "redirect:/password/find";
		} else {
			model.addAttribute("uuid", uuid);
			return "account/password_find_update";
		}
	}

	@PostMapping("/password/find/{uuid}")
	public String passwordUpdate(@PathVariable("uuid") String uuid, @RequestParam("password") String password,
			RedirectAttributes redirectAttributes) {
		accountService.savePasswordFind(uuid, password);
		redirectAttributes.addAttribute("find_password", "success");
		return "redirect:/login";
	}

	@GetMapping("/checkUsername")
	@ResponseBody
	public boolean checkUsername(@RequestParam("loginName") String username) {
		return accountService.getUserByUserName(username) == null;
	}

	@GetMapping("/checkEmail")
	@ResponseBody
	public boolean checkEmail(@RequestParam("email") String email) {
		return accountService.getUserByEmail(email) == null;
	}

	@GetMapping("/checkEmailNot")
	@ResponseBody
	public boolean checkEmailNot(@RequestParam("email") String email) {
		return accountService.getUserByEmail(email) != null;
	}

}
