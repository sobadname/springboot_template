package com.tykj.template.security.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.ObjectPostProcessor;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.tykj.template.security.handler.LoginSuccessHandler;
import com.tykj.template.security.service.SecurityAccessDecisionService;
import com.tykj.template.security.service.SecurityMetadataSourceService;
import com.tykj.template.security.service.SecurityUserDetailsService;
import com.tykj.template.security.utils.SecurityUtils;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	private Logger logger = LoggerFactory.getLogger(SecurityConfig.class);

	@Autowired
	private SecurityUserDetailsService securityUserDetailsService;

	@Autowired
	private SecurityAccessDecisionService securityAccessDecisionService;

	@Autowired
	private SecurityMetadataSourceService securityMetadataSourceService;

	@Autowired
	private LoginSuccessHandler loginSuccessHandler;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
				.antMatchers("/css/**", "/font-awesome/**", "/js/**", "/image/**", "/actuator/**", "/page/**")
				.permitAll().anyRequest().authenticated().and().formLogin().loginPage("/login")
				.defaultSuccessUrl("/index").failureUrl("/login?error").permitAll().successHandler(loginSuccessHandler)
				.and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
				.logoutSuccessUrl("/login?logout").invalidateHttpSession(true).permitAll().and().exceptionHandling()
				.accessDeniedPage("/page/403");
		http.authorizeRequests().anyRequest().authenticated()
				.withObjectPostProcessor(new ObjectPostProcessor<FilterSecurityInterceptor>() {
					public <O extends FilterSecurityInterceptor> O postProcess(O fsi) {
						fsi.setAccessDecisionManager(securityAccessDecisionService);
						fsi.setSecurityMetadataSource(securityMetadataSourceService);
						return fsi;
					}
				});
		logger.info("security config, set /css/**, /font-awesome/**, /js/**, /actuator/**, /image/** permit all");
	}

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(securityUserDetailsService).passwordEncoder(SecurityUtils.getPasswordEncoder());
		auth.eraseCredentials(true);
		logger.info("security config, set userDetailsService: " + securityUserDetailsService
				+ ", set eraseCredentials: true");
	}

}
